// Copyright© 2014 Jeroen Stemerdink. All Rights Reserved.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading;
using System.Xml;

using EPiServer.Framework.Localization.XmlResources;

using log4net;

namespace EPi.Libraries.Localization
{
    /// <summary>
    ///     The translation provider.
    /// </summary>
    public class TranslationProvider : XmlLocalizationProvider
    {
        #region Static Fields

        /// <summary>
        ///     The logger.
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(TranslationProvider));

        #endregion

        #region Public Properties

        /// <summary>
        ///     Gets all available languages from the translation container.
        ///     An available language does not need to contain any translations.
        /// </summary>
        public override IEnumerable<CultureInfo> AvailableLanguages
        {
            get
            {
                return TranslationFactory.Instance.AvailableLanguages;
            }
        }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        ///     Gets a translated string from a language key.
        /// </summary>
        /// <param name="originalKey">The unmodified key</param>
        /// <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
        /// <param name="culture">The requested culture for the resource string</param>
        /// <returns>A translated resource string</returns>
        public override string GetString(string originalKey, string[] normalizedKey, CultureInfo culture)
        {
            string translatedValue = null;

            // Wait for a second max if the collection is being modified.
            SpinWait.SpinUntil(
                () => (this.TryGetString(originalKey, normalizedKey, culture, out translatedValue)),
                1000);

            return translatedValue;
        }

        /// <summary>
        ///     Initializes the provider.
        /// </summary>
        /// <param name="name">
        ///     The friendly name of the provider.
        /// </param>
        /// <param name="config">
        ///     A collection of the name/value pairs representing the provider-specific attributes specified in the configuration
        ///     for this provider.
        /// </param>
        public override void Initialize(string name, NameValueCollection config)
        {
            base.Initialize(name, config);
            this.LoadTranslations();
        }

        /// <summary>
        ///     Load the translations.
        /// </summary>
        public void LoadTranslations()
        {
            try
            {
                string translations = TranslationFactory.Instance.GetXDocument();
                byte[] byteArray = Encoding.Unicode.GetBytes(translations);

                using (MemoryStream stream = new MemoryStream(byteArray))
                {
                    this.Load(stream);
                }
            }
            catch (ArgumentNullException argumentNullException)
            {
                Logger.Error(
                    "No xml generated by the TranslationFactory while handling Reload event.",
                    argumentNullException);
            }
            catch (EncoderFallbackException encoderFallbackException)
            {
                Logger.Error("Encoder exception while handling Reload event.", encoderFallbackException);
            }
            catch (XmlException xmlException)
            {
                Logger.Error(
                    "Invalid xml generated by the TranslationFactory while handling Reload event.",
                    xmlException);
            }
        }

        #endregion

        #region Methods

        /// <summary>
        ///     Tries to get a translated string from a language key.
        /// </summary>
        /// <param name="originalKey">The unmodified key</param>
        /// <param name="normalizedKey">The <paramref name="originalKey" /> normalized and split into an array</param>
        /// <param name="culture">The requested culture for the resource string</param>
        /// <param name="translatedValue">A translated resource string.</param>
        /// <returns><c>true</c> if a translated value was retrieved, <c>false</c> otherwise.</returns>
        private bool TryGetString(
            string originalKey,
            string[] normalizedKey,
            CultureInfo culture,
            out string translatedValue)
        {
            translatedValue = null;

            // Prevent the spin-wait loop from consuming resources that a waiting thread may use,  allowing the thread to yield if another thread is waiting.
            Thread.Sleep(0);

            // Get the translated value. Only return false on an InvalidOperationException, which can be caused if the collection is modified.
            try
            {
                translatedValue = base.GetString(originalKey, normalizedKey, culture);
            }
            catch (InvalidOperationException)
            {
                Logger.Debug("[Localization] Translation collection was modified. Entering wait.");

                // Wait only when the translation are being updated.
                return false;
            }
            catch (Exception exception)
            {
                Logger.Error("[Localization] Error getting translation.", exception);
            }

            return true;
        }

        #endregion
    }
}